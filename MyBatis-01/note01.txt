1.什么是MyBatis框架？
  持久层框架 
 ORM Object Relational Mapping 对象关系映射
  半自动化
  支持自定义SQL语句、存储过程和高级映射（resultMap）
  避免了几乎所有的JDBC操作、参数的设置、获取结果集
  提供xml和注解两种方式配置和映射原始类型、接口和pojo为数据库记录
2.开发MyBatis项目的流程
 1)导包  mybatis.jar、数据库驱动包
 2)写配置 MyBatis-Config.xml全局配置、SQL映射文件
     MyBatis-Config.xml全局配置:
                  settings、别名、导入外部数据库连接属性文件、数据库连接属性配置、事务管理器类型、连接池类型、mappers映射文件注册
     SQL映射文件:
     			  namespace:值为对应dao接口的类全路径名  com.mybatis.dao.EmpMapper  类似于将该sql映射文件作为接口实现类
     			  id:具体sql操作的标签 内的属性   值与方法名一样
     			           由namespace+id确定一个方法的实现    因此一个sql映射文件内id唯一不能重复
     			  #{}:取得接口内方法传递的参数值
     			  resultType:返回值类型   查询标签必须指定 一般为实体类的全路径名称    增删改不要指定  可以根据方法返回值 动态返回对应类型   int、long、boolean（当影响行为0->false）
     			  sql操作标签中的sql语句末尾 不能加 分号';'否则报错
 3)测试
   String cofig="mb-config.xml";//类路径下的全局文件名  
   InputStream inputStream = Resources.getResourceAsStream(cofig);//用Resources工具类加载文件  返回输入流
   SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(inputStream); //工厂构建器用输入流构建SqlSessionFactory工厂对象
   SqlSession sqlSession=sqlSessionFactory.openSqlSession();//获得一次数据库会话  可以传一个参数指定事务是否自动提交   默认为false  因此 需要手动提交事务
   ###一个session工厂对象  但每次操作数据库都重新打开一次数据库连接  避免多线程场景的并发问题
   //进行sql操作
   EmpMapper mapper=sqlSession.getMapper(EmpMapper.class);//根据接口获得代理对象  用以调用方法执行sql操作
   sqlSession.commit();//提交事务
   //连接用完后必须关闭  否则会消耗数据库连接资源
   sqlSession.close();
 4)使用的搭配方式
    1.<mapper resource="xml映射文件路径"/>
           映射文件和接口可以不同名称、不同包，但映射文件的namespace=接口全路径
    2.<mapper class="接口全路径"/>
           映射文件和接口必须同名称且同包(或者在项目下新建资源文件夹  其下建立与接口相同的包名   且xml名称和接口名称一样)
    3.<package name="接口所在包路径"/>
    4.用注解方式写@Select等  不需要xml映射文件  只需要mapper里里指定接口路径或package里指定接口包路径
3.settings的设置属性   MyBatis运行时的重要设定  影响行为
  1)mapUnderscoreToCamelCase 驼峰命名设置   
  2)缓存 一级、二级
4.typeAliases类型别名
  1)typeAliase type=  name=  指定类型和响应别名  name不指定就为类名称首字母小写
  2)<package name="com.mybatis01"/> 指定别名包  类名称首字母小写,如果需要修改某一别名  直接在实体类标注解@Alias("新别名")
  ###注解的别名会覆盖其它方式的设定
  ###推荐使用实体类的全路径名称  可以链接到 检错
5.类型处理器  将数据库类型转化为java的响应类型   可以自定义  实现接口或继承类
6.plus 插件 利用动态代理 拦截改变 执行器、预处理器、类型处理器、参数处理器四个方法的行为  例如 PageHelper分页
 