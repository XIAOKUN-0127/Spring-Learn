事务的传播行为
  场景解释:当有一个事务方法嵌套调用其他的事务方法 其中调用的事务方法c发生异常 b事务是否回滚  b调用前的a事务语句是否回滚
  
  tx_a(){
  	a。。。
  	tx_b(){
  	
  	}
  	tx_c(){
  	
  	}
  }
   
事务的传播行为    每个事务  使用的connection对象是否一样
  required  标记了该属性  表示如果是事务方法调用(在事务内)  即将该事务方法放到当前事务运行
  	其效果是 将嵌套的事务当作调用事务方法的同一事务 ，即c/b异常 事务a的语句均回滚     子事务的timeout|rollback等设定无效   父事务才有效
  requires_new 启动一个新事务  不在其它事务内运行
  	效果是c事务的异常不影响b事务和a事务  即重新开了一个事务 调用方法事务的执行被挂起   
  supprts 有事务就运行在事务  没有事务就可不运行到事务
  
  not_supported  不运行到事务
  
  never 当前方法必须不运行在事务内 有事务就抛异常
  
  nested
  
  mandatory  当前方法必须运行在事务内 没事务就抛异常
   
  